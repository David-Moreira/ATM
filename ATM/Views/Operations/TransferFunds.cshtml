@model ATM.Models.TransferFundsViewModel
@{ViewBag.Title = "Transfer Funds";}
<div class="col-xs-12">
    <blockquote>Transfer funds from one account to another. You can type in a routing number of another account that is not in your available accounts. </blockquote>
</div>
<div class="col-xs-6">
    <div class="tile">
        <h5>From:</h5>

        <button data-toggle="modal" data-target="#fromAccount" class="btn btn-block btn-lg btn-inverse"><h6 id="mainFromAccount">@Session["AccountNumber"]</h6></button>
    </div>
</div>

<div class="col-xs-6">
    <div class="tile">
        <h5>To:</h5>

        <button data-toggle="modal" data-target="#toAccount" class="btn btn-block btn-lg btn-inverse"><h6 id="mainToAccount">&nbsp;</h6></button>
    </div>
</div>
<div class="col-xs-12">
    <blockquote><h6>Click an account number to change to a different account.</h6></blockquote>
</div>
@using (@Html.BeginForm("TransferFunds", "Operations", FormMethod.Post, new { id = "form-transferFunds" }))
{

    <div class="col-xs-12">
        <h6>Amount to Transfer:</h6>
        @Html.TextBoxFor(m => m.Amount, "{0:c}", new { @id = "moneyInput", @class = "form-control", @readonly = "readonly" })
        <div id="pinPad">
            <table>
                <tr>
                    <td><a id="btn1" href="#" class="btn btn-block btn-lg btn-inverse">1</a></td>
                    <td><a id="btn2" href="#" class="btn btn-block btn-lg btn-inverse">2</a></td>
                    <td><a id="btn3" href="#" class="btn btn-block btn-lg btn-inverse">3</a></td>
                    <td><a id="btn4" href="#" class="btn btn-block btn-lg btn-inverse">4</a></td>
                    <td><a id="btn5" href="#" class="btn btn-block btn-lg btn-inverse">5</a></td>
                </tr>
                <tr>
                    <td><a id="btn6" href="#" class="btn btn-block btn-lg btn-inverse">6</a></td>
                    <td><a id="btn7" href="#" class="btn btn-block btn-lg btn-inverse">7</a></td>
                    <td><a id="btn8" href="#" class="btn btn-block btn-lg btn-inverse">8</a></td>
                    <td><a id="btn9" href="#" class="btn btn-block btn-lg btn-inverse">9</a></td>
                    <td><a id="btn0" href="#" class="btn btn-block btn-lg btn-inverse">0</a></td>
                    <td colspan="2"><a id="btnClear" href="#" style="font-size:2.5rem" class="btn btn-block btn-lg btn-default text-uppercase">Clear</a></td>
                </tr>
            </table>
        </div>
    </div>

    <div class="col-xs-12">
        @Html.ValidationSummary(true, "Please verify the following errors:", new { @class = "text-danger" })
    </div>

    @Html.AntiForgeryToken()
    @Html.HiddenFor(x => x.accountNumber)
    @Html.HiddenFor(x => x.recipientAccountNumber)
}

<div class="col-xs-12" style="margin-bottom: 2rem;">
    <a href="javascript:document.querySelector('#form-transferFunds').submit()" class="btn btn-block btn-lg btn-success"><h6><span class="fui-check"></span> Confirm Transfer</h6></a>
</div>

<!--Modals-->
<!-- Modal fromAccount -->
<div class="modal fade" id="fromAccount" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Available Accounts</h4>
            </div>
            <div class="modal-body">

                <p>Select from an available account below.</p>

                <div id="divFromAccounts"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal toAccount -->
<div class="modal fade" id="toAccount" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Available Accounts</h4>
            </div>
            <div class="modal-body">
                <p>Input Routing Number</p>
                <input type="text" id="toAccountCustom" class="form-control" />
                <button type="button" id="btnRouteNumber" class="btn btn-primary text-uppercase routingButton">Use Routing Number</button>
                <p>or select from an available account below.</p>

                <div id="divToAccounts">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script id="functions" type="text/javascript">
        function SelectFromAccount(event) {
            let el = event.srcElement;

            let accountNumber = el;
            if (el.id != "txtAccountNumber") {
                accountNumber = el.offsetParent.querySelector("#txtAccountNumber")
            }

            let fromAccount = document.querySelector("#mainFromAccount");
            let tempAccHolder = fromAccount.textContent;
            document.querySelector("#accountNumber").value = fromAccount.textContent = accountNumber.textContent;
            accountNumber.textContent = tempAccHolder;
            $(".modal").modal('hide');
            BindAccounts("From");
        }

        function SelectToAccount(event) {
            let el = event.srcElement;

            let accountNumber = el;
            if (el.id != "txtAccountNumber") {
                accountNumber = el.offsetParent.querySelector("#txtAccountNumber")
            }

            let ToAccount = document.querySelector("#mainToAccount");
            let tempAccHolder = ToAccount.textContent;
            document.querySelector("#recipientAccountNumber").value = ToAccount.textContent = accountNumber.textContent;
            accountNumber.textContent = tempAccHolder;
            $(".modal").modal('hide');
            BindAccounts("To");
        }

        function ValidAccount(number) {
            let toAccount = document.querySelector("#mainToAccount");
            toAccount.textContent = number;
            $(".modal").modal('hide');
        }

        function InvalidAccount() {
            alert("We could not find the account on our system. Please insert a valid account.");
        }

        function SetGlobalUserAccounts(result) {
            globalUserAccounts = result;
            BindAccounts("To");
            BindAccounts("From");
        }

        function BindAccounts(FromOrTo) {

            let divAccounts;
            let currentAcc;
            let clickFunction;
            if (FromOrTo == "From") {
                divAccounts = document.querySelector("#divFromAccounts");
                currentAcc = document.querySelector("#mainFromAccount");
                clickFunction = SelectFromAccount;
            } else if (FromOrTo == "To") {
                divAccounts = document.querySelector("#divToAccounts");
                currentAcc = document.querySelector("#mainToAccount");
                clickFunction = SelectToAccount;
            }
            else {
                console.log("Dev: Please define parameter for BindAccountsFunction.");
                return;
            }

            divAccounts.innerHTML = "";

            globalUserAccounts.forEach(function (account) {
                if (currentAcc.textContent != account.AccountNumber) {
                    let anchor = document.createElement('a');
                    anchor.href = "javascript:void(0)";
                    anchor.classList.add("btn", "btn-block", "btn-lg", "btn-inverse", "text-uppercase", "modalList");
                    anchor.onclick = clickFunction;

                    let para = document.createElement('p');

                    let spanAccountName = document.createElement('span');
                    spanAccountName.id = "txtAccountName";
                    spanAccountName.textContent = account.AccountName;

                    let spanAccountNumber = document.createElement('span');
                    spanAccountNumber.id = "txtAccountNumber";
                    spanAccountNumber.textContent = account.AccountNumber;

                    para.appendChild(spanAccountName);
                    para.appendChild(spanAccountNumber);
                    anchor.appendChild(para);
                    divAccounts.appendChild(anchor);
                }
            });
        }
    </script>

    <script id="docReady" type="text/javascript">
        var globalUserAccounts;

        document.addEventListener("DOMContentLoaded", function () {
            AjaxRequest("GET", "GetUserAvailableAccounts", true, "", SetGlobalUserAccounts);

            let btnGetRouteNumber = document.querySelector("#btnRouteNumber");
            let toAccount = document.querySelector("#toAccountCustom");
            btnGetRouteNumber.addEventListener("click", () => {
                AjaxRequest("POST", "ValidateAccount", true, JSON.stringify({ "number": toAccount.value }), ValidAccount, InvalidAccount);
            });

            let btnArray = [];
            let btnClear = document.querySelector("#btnClear");
            let userInput = document.querySelector("#moneyInput");

            for (let i = 0; i < 10; i++) {
                document.querySelector("#btn" + i).addEventListener("click", () => userInput.value += i);
            }

            btnClear.addEventListener("click", () => userInput.value = "");

        });
    </script>
}